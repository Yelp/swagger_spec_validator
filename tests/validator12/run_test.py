# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import glob
import os
import os.path

import jsonschema.exceptions
import pytest

from swagger_spec_validator import SwaggerValidationError
from swagger_spec_validator.common import read_file
from swagger_spec_validator.validator12 import validate_api_declaration
from swagger_spec_validator.validator12 import validate_resource_listing
from tests.conftest import test_dir


def run_json_test_with_func(json_test_path, func):
    """Run the specified test function over a JSON test files."""
    test_data = read_file(json_test_path)

    # Grab last two components from test_path
    # e.g. "api_declarations/array_nested_fail.json"
    test_name = os.sep.join(json_test_path.split(os.sep)[-2:])

    if test_name.endswith('_pass.json'):
        func(test_data)
    elif test_name.endswith('_fail.json'):
        with pytest.raises((SwaggerValidationError, jsonschema.exceptions.ValidationError)):
            func(test_data)


def get_json_files(base_dir, path):
    return glob.iglob(os.path.join(base_dir, path, '*.json'))


def pytest_generate_tests(metafunc):
    """
    Generate test fixtures for test_validate_resource_listing and test_validate_resource_listing tests.
    https://docs.pytest.org/en/latest/parametrize.html#pytest-generate-tests
    """
    if metafunc.function == test_validate_api_declaration:
        metafunc.parametrize(
            'api_declaration_test_file',
            get_json_files(test_dir(), 'data/v1.2/api_declarations'),
        )
    elif metafunc.function == test_validate_resource_listing:
        metafunc.parametrize(
            'resource_listing_test_file',
            get_json_files(test_dir(), 'data/v1.2/resource_listings'),
        )


def test_validate_api_declaration(test_dir, api_declaration_test_file):
    # api_declaration_test_file fixture is generated by pytest_generate_tests and contains
    # all the files provided by api_declaration_test_files
    run_json_test_with_func(
        json_test_path=os.path.join(test_dir, api_declaration_test_file),
        func=validate_api_declaration,
    )


def test_validate_resource_listing(test_dir, resource_listing_test_file):
    # resource_listing_test_file fixture is generated by pytest_generate_tests and contains
    # all the files provided by resource_listing_test_files
    run_json_test_with_func(
        json_test_path=os.path.join(test_dir, resource_listing_test_file),
        func=validate_resource_listing,
    )
